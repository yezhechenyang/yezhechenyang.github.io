<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Hexo】头像防盗链破解</title>
      <link href="/2020/07/11/hexo-tou-xiang-fang-dao-lian-po-jie/"/>
      <url>/2020/07/11/hexo-tou-xiang-fang-dao-lian-po-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="1-情景描述"><a href="#1-情景描述" class="headerlink" title="1. 情景描述"></a>1. 情景描述</h3><pre><code>在友情链接页面添加友链时，发现头像显示不出来！！！按F12一查看，却发现：返回HTTP状态码403，x-tengine-error: denied by Referer ACL 。头像来源是CSDN，很明显，CSDN是添加了防盗链的。那么，该如何解决呢？</code></pre><h3 id="2-解决过程"><a href="#2-解决过程" class="headerlink" title="2. 解决过程"></a>2. 解决过程</h3><p>防盗链是通过 referrer 来控制的。</p><p>如果在浏览器新标签页直接访问头像是可以显示的，因为请求头的referrer为空。</p><p>而在你自己的网站直接通过img标签引入，请求时便会带上，比如</p><pre><code>referer: https://zhangxiaocai.cn/friends/</code></pre><p>csdn发现请求来源不是自己的网站，便会禁止访问。</p><p><strong>在网上找了两种方法，都不起作用</strong>，分别是：</p><ul><li>添加 meta 标签<pre><code>&lt;meta name="referrer" content="no-referrer"&gt;</code></pre></li><li>直接在img标签设置 referrer<pre><code>&lt;img referrer="no-referrer|origin|unsafe-url" src="{{item.src}}"/&gt;</code></pre></li></ul><p>最后找到一种解决方案，虽然麻烦一点，但效果不错。</p><h3 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h3><p>通过 Window 对象与 iframe 的配合，加载防盗链图片。</p><pre><code>&lt;!--&lt;img src="&lt;%- friend.avatar %&gt;" alt="img"&gt;--&gt;&lt;script&gt;        window.img&lt;%- i %&gt; = '&lt;style&gt;html,body{margin:0;padding:0;}&lt;/style&gt;&lt;img style="border-radius: 50%;border-style: none;" width="100px" height="100px" src=\'' + "&lt;%- friend.avatar %&gt;" + '?' + Math.random() + '\' /&gt;';        document.write('&lt;iframe src="javascript:parent.img&lt;%- i %&gt;;" frameBorder="0" scrolling="no" width="100px" height="100px"&gt;&lt;/iframe&gt;');&lt;/script&gt;</code></pre><p>a. 将 img 挂在到Window对象中；</p><pre><code>Window.自定义变量 = img 头像内容</code></pre><p>b. 然后创建 iframe，由iframe去获取</p><pre><code>&lt;iframe src="javascript:parent.自定义变量"&gt;&lt;/iframe&gt;</code></pre><p>其中 parent 指的就是 Window 对象。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】概述</title>
      <link href="/2020/07/10/spring-gai-shu/"/>
      <url>/2020/07/10/spring-gai-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Spring介绍"><a href="#1-Spring介绍" class="headerlink" title="1. Spring介绍"></a>1. Spring介绍</h3><ul><li>Spring是世界上最流行的Java开源框架；</li><li>Spring是技术生态体系的集大成者，包含Spring Framework、Spring Boot和Spring Cloud等诸多项目；</li><li>SpringMVC是Spring Framework项目中web模块提供的MVC框架；</li></ul><h3 id="2-Spring-Framework介绍"><a href="#2-Spring-Framework介绍" class="headerlink" title="2. Spring Framework介绍"></a>2. Spring Framework介绍</h3><ul><li>Spring Framework是整个Spring生态体系的基石；</li><li>为依赖注入、事务管理、WEB应用、数据访问等提供支持；</li></ul><h4 id="2-1-Spring-Framework的体系结构"><a href="#2-1-Spring-Framework的体系结构" class="headerlink" title="2.1 Spring Framework的体系结构"></a>2.1 Spring Framework的体系结构</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://yezhechenyang.gitee.io/imagebed/blog/spring-overview.png" alt="Spring Framework体系"></p><p>上图是在Spring官网提供的<a href="https://docs.spring.io/spring/docs/4.3.27.RELEASE/spring-framework-reference/htmlsingle/" target="_blank" rel="noopener">Spring Framework 4.3.27 在线参考文档</a>找到的Spring体系结构图。（相对于Spring3，多了Messaging模块。）</p><h4 id="2-2-模块划分"><a href="#2-2-模块划分" class="headerlink" title="2.2 模块划分"></a>2.2 模块划分</h4><p>六大模块：核心容器、面向切面与植入、消息传递、数据访问与集成、Web和远程调用、测试。</p><h5 id="2-2-1-核心容器"><a href="#2-2-1-核心容器" class="headerlink" title="2.2.1 核心容器"></a>2.2.1 核心容器</h5><pre><code>spring-core：依赖注入IoC与DI的最基本实现spring-beans：Bean工厂与bean的装配spring-context：spring的context上下文即IoC容器spring-context-support spring-expression：spring表达式语言</code></pre><h5 id="2-2-2-面向切面与植入"><a href="#2-2-2-面向切面与植入" class="headerlink" title="2.2.2 面向切面与植入"></a>2.2.2 面向切面与植入</h5><pre><code>spring-aop：面向切面编程spring-aspects：集成AspectJspring-instrument：提供一些类级的工具支持和ClassLoader级的实现，用于服务器spring-instrument-tomcat：针对tomcat的instrument实现</code></pre><h5 id="2-2-3-消息传递"><a href="#2-2-3-消息传递" class="headerlink" title="2.2.3 消息传递"></a>2.2.3 消息传递</h5><pre><code>spring-messaging</code></pre><h5 id="2-2-4-数据访问与集成"><a href="#2-2-4-数据访问与集成" class="headerlink" title="2.2.4 数据访问与集成"></a>2.2.4 数据访问与集成</h5><pre><code>spring-jdbc：提供JDBC支持spring-tx：事务管理spring-orm：对象关系映射支持spring-oxm：XML处理支持spring-jms：Java信息服务支持</code></pre><h5 id="2-2-5-Web和远程调用"><a href="#2-2-5-Web和远程调用" class="headerlink" title="2.2.5 Web和远程调用"></a>2.2.5 Web和远程调用</h5><pre><code>spring-web：提供最基础Web支持spring-webmvc：提供MVC的实现spring-websocket：支持WebSocketspring-webmvc-portlet：在Portlet环境中使用的MVC实现</code></pre><h5 id="2-2-6-测试"><a href="#2-2-6-测试" class="headerlink" title="2.2.6 测试"></a>2.2.6 测试</h5><pre><code>spring-test：用于单元测试与集成测试</code></pre><h3 id="3-Spring-Boot介绍"><a href="#3-Spring-Boot介绍" class="headerlink" title="3. Spring Boot介绍"></a>3. Spring Boot介绍</h3><ul><li>是Spring Framework的一套快速配置脚手架，可以基于Spring Boot 快速开发单个微服务；</li><li>为快速启动且最小化配置的spring应用而设计；</li></ul><h3 id="4-Spring-Cloud介绍"><a href="#4-Spring-Cloud介绍" class="headerlink" title="4. Spring Cloud介绍"></a>4. Spring Cloud介绍</h3><ul><li>是一整套基于Spring Boot的微服务解决方案；</li><li>为开发者提供了很多工具，用于快速构建分布式系统的一些通用模式，例如：配置管理、注册中心、服务发现、限流、网关、熔断、链路追踪等；</li><li>关注于多个微服务的整合与管理；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring Framework </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Chrome扩展开发】去贴吧广告</title>
      <link href="/2020/07/07/chrome-kuo-zhan-kai-fa-qu-tie-ba-guang-gao/"/>
      <url>/2020/07/07/chrome-kuo-zhan-kai-fa-qu-tie-ba-guang-gao/</url>
      
        <content type="html"><![CDATA[<h3 id="1-本地创建插件目录和文件"><a href="#1-本地创建插件目录和文件" class="headerlink" title="1. 本地创建插件目录和文件"></a>1. 本地创建插件目录和文件</h3><h3 id="1-1-创建目录"><a href="#1-1-创建目录" class="headerlink" title="1.1 创建目录"></a>1.1 创建目录</h3><pre><code>D:\CodeTest\BrowserExtension\RemoveAd</code></pre><h3 id="1-2-创建文件"><a href="#1-2-创建文件" class="headerlink" title="1.2 创建文件"></a>1.2 创建文件</h3><blockquote><p>“D:\CodeTest\BrowserExtension\RemoveAd\manifest.json”</p></blockquote><pre><code>{    "manifest_version": 2,    "name": "自定义去广告",    "description": "学习Chrome扩展开发，去广告实践！",    "version": "0.0.1",    // 需要直接注入页面的JS    "content_scripts":     [        {            "matches": ["https://tieba.baidu.com/*"],            // 多个JS按顺序注入            "js": ["tieba-remove-ad.js"],            // 代码注入的时间，可选值： "document_start", "document_end", or "document_idle"，最后一个表示页面空闲时，默认document_idle            "run_at": "document_idle"        }    ]}</code></pre><blockquote><p>“D:\CodeTest\BrowserExtension\RemoveAd\tieba-remove-ad.js”</p></blockquote><pre><code>//判断对象是否存在指定css样式的classfunction hasClass(obj, cls) {    return obj.className.match(new RegExp('(\\s|^)' + cls + '(\\s|$)'));}//给对象添加css样式，或者获取对象的css样式function css(obj, attr, value) {    switch (arguments.length) {        case 2:            //读取属性值            return obj.currentStyle ? obj.currentStyle[attr] : getComputedStyle(obj, null)[attr];            break;        case 3:            //设置属性            obj.style[attr] = value;            break;        default:            return "";    }}//帖子容器ulvar ulItem = document.getElementById('thread_list');//帖子列表livar liArr = ulItem.children;//是否为置顶帖子和普通帖子var flag = false;for(var i = 0; i &lt; liArr.length; i++){    flag = hasClass(liArr[i], 'thread_top_list_folder'); //置顶帖子    flag = flag || hasClass(liArr[i], 'j_thread_list'); //普通帖子    if(flag){        continue;    }else{  // 其他视为广告，隐藏之        css(liArr[i], 'display', 'none');    }}</code></pre><h3 id="2-将插件载入Chrome"><a href="#2-将插件载入Chrome" class="headerlink" title="2. 将插件载入Chrome"></a>2. 将插件载入Chrome</h3><p>打开Chrome，地址栏输入</p><pre><code>chrome://extensions/</code></pre><p>右上角点开开发者模式，会弹出“加载已解压的扩展程序”、“打包扩展程序”等按钮。</p><p>点击“加载已解压的扩展程序”按钮，选择“RemoveAd”文件夹。</p><p>下方会出现一个自己开发的插件卡片。</p><p>卡片包含插件的名称、描述信息。<br>还生成一个唯一的ID。<br>最下面一排是详细信息文字按钮、删除文字按钮、刷新图标按钮以及开启与关闭图标按钮。</p><p>修改了js，可以点击刷新按钮生效。</p><p>开启与关闭图标按钮，对比使用插件前后的效果。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Chrome扩展开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome扩展 </tag>
            
            <tag> 贴吧去广告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】博客搭建</title>
      <link href="/2020/07/05/hexo-bo-ke-da-jian/"/>
      <url>/2020/07/05/hexo-bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h3><p>安装 Git、NodeJs、Hexo 。</p><ul><li>博客框架：Hexo</li><li>博客主题：Matery</li><li>托管：Gitee</li></ul><h3 id="2-下载模板"><a href="#2-下载模板" class="headerlink" title="2. 下载模板"></a>2. 下载模板</h3><p>推荐使用 <a href="https://github.com/shw2018/hexo-blog-fly.git" target="_blank" rel="noopener">hexo-blog-fly</a></p><pre><code>git clone https://github.com/shw2018/hexo-blog-fly.git</code></pre><h3 id="3-本地运行"><a href="#3-本地运行" class="headerlink" title="3. 本地运行"></a>3. 本地运行</h3><h4 id="3-1-修改个人信息"><a href="#3-1-修改个人信息" class="headerlink" title="3.1 修改个人信息"></a>3.1 修改个人信息</h4><pre><code>Hexo博客框架的配置：_config.ymlMatery主题的配置：themes\matery\_config.yml</code></pre><h4 id="3-2-运行"><a href="#3-2-运行" class="headerlink" title="3.2 运行"></a>3.2 运行</h4><pre><code>npm i   # 先安装依赖hexo s  # 再运行</code></pre><h3 id="3-3-访问查看效果"><a href="#3-3-访问查看效果" class="headerlink" title="3.3 访问查看效果"></a>3.3 访问查看效果</h3><pre><code>localhost:4000</code></pre><h3 id="4-部署"><a href="#4-部署" class="headerlink" title="4. 部署"></a>4. 部署</h3><h4 id="4-1-在Gitee上创建一个仓库"><a href="#4-1-在Gitee上创建一个仓库" class="headerlink" title="4.1 在Gitee上创建一个仓库"></a>4.1 在Gitee上创建一个仓库</h4><pre><code>仓库名称：myblog （名字随便自己取）是否开源：公开勾选：使用Readme文件初始化这个仓库</code></pre><h4 id="4-2-本地推送"><a href="#4-2-本地推送" class="headerlink" title="4.2 本地推送"></a>4.2 本地推送</h4><p>修改 _config.yml 中配置的网址配置</p><pre><code>url: https://gitee.com/yezhechenyang/myblogroot: /myblog/</code></pre><p>修改 _config.yml 中配置的部署仓库地址</p><pre><code>deploy:- type: git  repo:    gitee: https://gitee.com/yezhechenyang/myblog.git  branch: master</code></pre><p>去掉 baidu_url_submitter ，这个以后再琢磨</p><pre><code># - type: baidu_url_submitter</code></pre><p>运行部署命令</p><pre><code>hexo d</code></pre><h4 id="4-3-在Gitee上启动Gitee-Pages服务"><a href="#4-3-在Gitee上启动Gitee-Pages服务" class="headerlink" title="4.3 在Gitee上启动Gitee Pages服务"></a>4.3 在Gitee上启动Gitee Pages服务</h4><pre><code>打开 myblog 仓库；选择 服务 -- Gitee Pages；勾选 强制 HTTPS ；点击启动。</code></pre><h4 id="4-4-访问看看效果"><a href="#4-4-访问看看效果" class="headerlink" title="4.4 访问看看效果"></a>4.4 访问看看效果</h4><pre><code>https://yezhechenyang.gitee.io/myblog</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/04/hello-world/"/>
      <url>/2020/07/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Hello World!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
