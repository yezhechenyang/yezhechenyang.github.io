<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Spring Boot】Actuator监控器</title>
      <link href="/2020/07/20/spring-boot-actuator-jian-kong-qi/"/>
      <url>/2020/07/20/spring-boot-actuator-jian-kong-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p><code>Actuator</code>是一款<code>Spring</code>自带的监控神器。</p><p>可以帮助你监控和管理<code>Spring Boot</code>应用，比如健康检查、审计、统计和<code>HTTP</code>追踪等。</p><p>集成非常简单，使用起来更是简单到爽歪歪，就是简单地<code>rest</code>接口调用查看，在要求不高的监控环境可以使用。</p><p>如果需要可视化的监控推荐：<code>Grafana</code>结合<code>prometheus</code>,提供了非常好的仪表盘、图标、分析和告警等功能。</p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><h4 id="2-1-配置"><a href="#2-1-配置" class="headerlink" title="2.1 配置"></a>2.1 配置</h4><p>引入<code>Maven</code>依赖。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>application.yml</code>中配置<code>Actuator</code>。</p><pre class="line-numbers language-xml"><code class="language-xml">server:  port: 8080  servlet:    context-path: /demomanagement:  # 端点信息接口使用的端口，为了和主系统接口使用的端口进行分离  server:    port: 8090    servlet:      context-path: /sys  # 端点健康情况，默认值"never"，设置为"always"可以显示硬盘使用情况和线程情况  endpoint:    health:      show-details: always  # 设置端点暴露的哪些内容，默认["health","info"]，设置"*"代表暴露所有可访问的端点  endpoints:    web:      exposure:        include: '*'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-调用"><a href="#2-2-调用" class="headerlink" title="2.2 调用"></a>2.2 调用</h4><p>启动项目后，可在浏览器直接访问<code>http://localhost:8090/sys/actuator</code>。</p><p><code>/actuator</code>是默认根路径。也可以自定义，比如：</p><pre><code>management.endpoints.web.base-path=/monitor</code></pre><p>访问<code>/actuator</code>你可以看到<code>Actuator</code>提供的所有<code>rest</code>接口。</p><p>然后，你可以一个个去调用看看，到底提供了些啥呢？</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Actuator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】读取property</title>
      <link href="/2020/07/20/spring-boot-du-qu-property/"/>
      <url>/2020/07/20/spring-boot-du-qu-property/</url>
      
        <content type="html"><![CDATA[<p>假如要从<code>application.yml</code>中读取自定义属性，在<code>Spring Boot</code>中该如何实现呢？</p><pre class="line-numbers language-xml"><code class="language-xml">application:  name: 我的应用名称  version: 我的应用版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-Value"><a href="#1-Value" class="headerlink" title="1. @Value"></a>1. @Value</h3><p>通过<code>@Value</code>可以轻松实现自定义属性的获取。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationProperty</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${application.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${application.version}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String version<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-ConfigurationProperties"><a href="#2-ConfigurationProperties" class="headerlink" title="2. @ConfigurationProperties"></a>2. @ConfigurationProperties</h3><p>使用<code>@ConfigurationProperties</code>就不用每个属性配置<code>@Value</code>了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"application"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationProperty</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String version<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-spring-boot-configuration-processor"><a href="#3-spring-boot-configuration-processor" class="headerlink" title="3. spring-boot-configuration-processor"></a>3. spring-boot-configuration-processor</h3><p>在<code>IDEA</code>中可能提示<code>Spring Boot configuration annotation processor not found in classpath</code>错误。</p><p>那么，需要添加<code>spring-boot-configuration-processor</code>依赖。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-additional-spring-configuration-metadata-json"><a href="#4-additional-spring-configuration-metadata-json" class="headerlink" title="4. additional-spring-configuration-metadata.json"></a>4. additional-spring-configuration-metadata.json</h3><p>在<code>META-INF/additional-spring-configuration-metadata.json</code>中配置，<br>可以去除<code>application.yml</code>中自定义配置的红线警告，<br>并且为自定义配置添加<code>hint</code>提醒。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"application.name"</span><span class="token punctuation">,</span>            <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Default value is artifactId in pom.xml."</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"java.lang.String"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"application.version"</span><span class="token punctuation">,</span>            <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Default value is version in pom.xml."</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"java.lang.String"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【bat脚本】字符串替换</title>
      <link href="/2020/07/18/bat-jiao-ben-zi-fu-chuan-ti-huan/"/>
      <url>/2020/07/18/bat-jiao-ben-zi-fu-chuan-ti-huan/</url>
      
        <content type="html"><![CDATA[<h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h3><pre class="line-numbers language-bash"><code class="language-bash">str:oldChar<span class="token operator">=</span>newChar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解释：将str中的oldChar替换成newChar。</p><h3 id="2-用法示例"><a href="#2-用法示例" class="headerlink" title="2. 用法示例"></a>2. 用法示例</h3><pre class="line-numbers language-bash"><code class="language-bash">@echo off<span class="token operator">&amp;</span>setlocal enabledelayedexpansionrem 将strA中的345a替换成000，并赋值给strB<span class="token keyword">set</span> strA<span class="token operator">=</span>12345abc<span class="token keyword">set</span> strB<span class="token operator">=</span><span class="token operator">!</span>strA:45a<span class="token operator">=</span>000<span class="token operator">!</span><span class="token keyword">echo</span> <span class="token operator">!</span>strB<span class="token operator">!</span>pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>result: 123000bc</p><h4 id="替换为空"><a href="#替换为空" class="headerlink" title="替换为空"></a>替换为空</h4><p>等号后面省略newChar就能替换为空。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> strB<span class="token operator">=</span><span class="token operator">!</span>strA:45a<span class="token operator">=</span><span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>result: 123bc</p><h3 id="3-循环案例"><a href="#3-循环案例" class="headerlink" title="3. 循环案例"></a>3. 循环案例</h3><p>将所有文件路径中根目录路径替换为空，比如，<br>根目录：D:\CodeTest\BatTest\imagebed\<br>文件路径：D:\CodeTest\BatTest\imagebed\wallpaper\wallpaper (3).jpg<br>替换后：wallpaper\wallpaper (3).jpg</p><p>代码如下：</p><pre class="line-numbers language-bash"><code class="language-bash">@echo off<span class="token operator">&amp;</span>setlocal enabledelayedexpansionrem %CD%获取当前路径，后面不自动带\，所以手动加个\<span class="token keyword">set</span> basePath<span class="token operator">=</span>%CD%\<span class="token keyword">echo</span> <span class="token operator">!</span>basePath<span class="token operator">!</span>rem /r表示递归的意思，子目录的文件也能遍历出来<span class="token keyword">for</span> /r  %%i <span class="token keyword">in</span> <span class="token punctuation">(</span>*.jpg, *.png<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>    <span class="token keyword">echo</span> %%i    <span class="token keyword">set</span> str<span class="token operator">=</span>%%i    rem 取basePath变量值时，千万别用双感叹号去取值，外层有了就别去嵌套，不然没好果子吃    <span class="token keyword">set</span> str<span class="token operator">=</span><span class="token operator">!</span>str:%basePath%<span class="token operator">=</span><span class="token operator">!</span>    rem 干脆把反斜杠也替换成斜杠得了    <span class="token keyword">set</span> str<span class="token operator">=</span><span class="token operator">!</span>str:\<span class="token operator">=</span>/<span class="token operator">!</span>    <span class="token keyword">echo</span> <span class="token operator">!</span>str<span class="token operator">!</span><span class="token punctuation">)</span>pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>result：</p><pre><code>D:\CodeTest\BatTest\imagebed\D:\CodeTest\BatTest\imagebed\blog\PicGo安装Gitee插件.pngblog/PicGo安装Gitee插件.pngD:\CodeTest\BatTest\imagebed\blog\spring-overview.pngblog/spring-overview.pngD:\CodeTest\BatTest\imagebed\wallpaper\wallpaper (3).jpgwallpaper/wallpaper (3).jpgD:\CodeTest\BatTest\imagebed\wallpaper\wallpaper (5).jpgwallpaper/wallpaper (5).jpg请按任意键继续. . .</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bat脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Framework】Bean生命周期实验</title>
      <link href="/2020/07/18/spring-framework-bean-sheng-ming-zhou-qi-shi-yan/"/>
      <url>/2020/07/18/spring-framework-bean-sheng-ming-zhou-qi-shi-yan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考：<a href="http://c.biancheng.net/view/4261.html" target="_blank" rel="noopener">Spring Bean的生命周期</a></p></blockquote><h3 id="1-Bean的生命周期执行流程"><a href="#1-Bean的生命周期执行流程" class="headerlink" title="1. Bean的生命周期执行流程"></a>1. Bean的生命周期执行流程</h3><ul><li>调用构造方法或工厂方法实例化Bean；</li><li>对Bean的所有属性进行依赖注入；</li><li>如果Bean实现BeanNameAware接口，则执行setBeanName()方法，传入当前Bean的id；</li><li>如果Bean实现BeanFactoryAware接口，则执行setBeanFactory()方法，传入当前工厂实例的引用；</li><li>如果Bean实现ApplicationContextAware接口，则执行setApplicationContext()方法，传入当前ApplicationContext实例的引用；</li><li>如果有自定义类实现BeanPostProcessor接口，则执行postProcessBeforeInitialization()方法，对Bean进行加工。Spring AOP便是使用它实现的；</li><li>如果Bean实现了InitializingBean接口，则执行afterPropertiesSet()方法。</li><li>如果在配置文件中通过 init-method 属性指定了初始化方法，则调用该初始化方法；</li><li>如果有自定义类实现BeanPostProcessor接口，则执行postProcessAfterInitialization()；</li><li>如果在 <bean> 中指定了该 Bean 的作用范围为 scope=”singleton”，则将该 Bean 放入 Spring IoC 的缓存池中，将触发 Spring 对该 Bean 的生命周期管理；如果在 <bean> 中指定了该 Bean 的作用范围为 scope=”prototype”，则将该 Bean 交给调用者，调用者管理该 Bean 的生命周期，Spring 不再管理该 Bean。</bean></bean></li><li>如果 Bean 实现了 DisposableBean 接口，则 Spring 会调用 destory() 方法将 Spring 中的 Bean 销毁；如果在配置文件中通过 destory-method 属性指定了 Bean 的销毁方法，则 Spring 将调用该方法对 Bean 进行销毁。</li></ul><h3 id="2-实验"><a href="#2-实验" class="headerlink" title="2. 实验"></a>2. 实验</h3><h4 id="2-1-maven配置"><a href="#2-1-maven配置" class="headerlink" title="2.1 maven配置"></a>2.1 maven配置</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.yale<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.27.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.27.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-创建Bean"><a href="#2-2-创建Bean" class="headerlink" title="2.2 创建Bean"></a>2.2 创建Bean</h4><h5 id="SimpleBean"><a href="#SimpleBean" class="headerlink" title="SimpleBean"></a>SimpleBean</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yale<span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>BeansException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>BeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>BeanFactoryAware<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>BeanNameAware<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>DisposableBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>InitializingBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContextAware<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * functions: * Created by cyy on 2020/7/18 10:36. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleBean</span> <span class="token keyword">implements</span> <span class="token class-name">BeanNameAware</span><span class="token punctuation">,</span> BeanFactoryAware        <span class="token punctuation">,</span> ApplicationContextAware<span class="token punctuation">,</span> InitializingBean<span class="token punctuation">,</span> DisposableBean <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DisposableBean destroy..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InitializingBean afterPropertiesSet..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SimpleBean myInit..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SimpleBean myDestroy..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is SimpleBean..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanFactory</span><span class="token punctuation">(</span>BeanFactory beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BeanFactoryAware setBeanFactory..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BeanNameAware setBeanName..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ApplicationContextAware setApplicationContext..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="MyBeanProcessor"><a href="#MyBeanProcessor" class="headerlink" title="MyBeanProcessor"></a>MyBeanProcessor</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yale<span class="token punctuation">.</span>beans<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>BeansException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanPostProcessor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * functions: * Created by cyy on 2020/7/18 10:48. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyBeanProcessor postProcessBeforeInitialization, beanName is "</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyBeanProcessor postProcessAfterInitialization, beanName is "</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-xml配置"><a href="#3-xml配置" class="headerlink" title="3. xml配置"></a>3. xml配置</h4><h5 id="spring-test-xml"><a href="#spring-test-xml" class="headerlink" title="spring-test.xml"></a>spring-test.xml</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>simpleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yale.entity.SimpleBean<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myInit<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDestroy<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myBeanProcessor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yale.beans.MyBeanProcessor<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h4><h5 id="SimpleBeanTest"><a href="#SimpleBeanTest" class="headerlink" title="SimpleBeanTest"></a>SimpleBeanTest</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yale<span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token keyword">import</span> junit<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>TestCase<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * functions: * Created by cyy on 2020/7/18 10:52. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleBeanTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBeanLifeCycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        AbstractApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-test.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SimpleBean simpleBean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"simpleBean"</span><span class="token punctuation">,</span> SimpleBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleBean<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-测试结果"><a href="#5-测试结果" class="headerlink" title="5.测试结果"></a>5.测试结果</h4><pre><code>D:\developTools\jdk1.8.0-64\bin\java.exe -ea -Didea.test.cyclic.buffer.size=1048576 -javaagent:D:\developTools\ideaIU-2020.1.win\lib\idea_rt.jar=7942:D:\developTools\ideaIU-2020.1.win\bin -Dfile.encoding=UTF-8 -classpath D:\developTools\ideaIU-2020.1.win\lib\idea_rt.jar;D:\developTools\ideaIU-2020.1.win\plugins\junit\lib\junit5-rt.jar;D:\developTools\ideaIU-2020.1.win\plugins\junit\lib\junit-rt.jar;D:\developTools\jdk1.8.0-64\jre\lib\charsets.jar;D:\developTools\jdk1.8.0-64\jre\lib\deploy.jar;D:\developTools\jdk1.8.0-64\jre\lib\javaws.jar;D:\developTools\jdk1.8.0-64\jre\lib\jce.jar;D:\developTools\jdk1.8.0-64\jre\lib\jfr.jar;D:\developTools\jdk1.8.0-64\jre\lib\jfxswt.jar;D:\developTools\jdk1.8.0-64\jre\lib\jsse.jar;D:\developTools\jdk1.8.0-64\jre\lib\management-agent.jar;D:\developTools\jdk1.8.0-64\jre\lib\plugin.jar;D:\developTools\jdk1.8.0-64\jre\lib\resources.jar;D:\developTools\jdk1.8.0-64\jre\lib\rt.jar;D:\developTools\jdk1.8.0-64\jre\lib\ext\access-bridge-64.jar;D:\developTools\jdk1.8.0-64\jre\lib\ext\cldrdata.jar;D:\developTools\jdk1.8.0-64\jre\lib\ext\dnsns.jar;D:\developTools\jdk1.8.0-64\jre\lib\ext\jaccess.jar;D:\developTools\jdk1.8.0-64\jre\lib\ext\jfxrt.jar;D:\developTools\jdk1.8.0-64\jre\lib\ext\localedata.jar;D:\developTools\jdk1.8.0-64\jre\lib\ext\nashorn.jar;D:\developTools\jdk1.8.0-64\jre\lib\ext\sunec.jar;D:\developTools\jdk1.8.0-64\jre\lib\ext\sunjce_provider.jar;D:\developTools\jdk1.8.0-64\jre\lib\ext\sunmscapi.jar;D:\developTools\jdk1.8.0-64\jre\lib\ext\sunpkcs11.jar;D:\developTools\jdk1.8.0-64\jre\lib\ext\zipfs.jar;D:\developTools\jdk1.8.0-64\bin\jacob-1.17-M2-x64.dll;D:\idea_workspace\spring-test\target\test-classes;D:\idea_workspace\spring-test\target\classes;D:\cyy\.m2\repository\org\springframework\spring-context\4.3.27.RELEASE\spring-context-4.3.27.RELEASE.jar;D:\cyy\.m2\repository\org\springframework\spring-aop\4.3.27.RELEASE\spring-aop-4.3.27.RELEASE.jar;D:\cyy\.m2\repository\org\springframework\spring-beans\4.3.27.RELEASE\spring-beans-4.3.27.RELEASE.jar;D:\cyy\.m2\repository\org\springframework\spring-core\4.3.27.RELEASE\spring-core-4.3.27.RELEASE.jar;D:\cyy\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar;D:\cyy\.m2\repository\org\springframework\spring-expression\4.3.27.RELEASE\spring-expression-4.3.27.RELEASE.jar;D:\cyy\.m2\repository\org\springframework\spring-aspects\4.3.27.RELEASE\spring-aspects-4.3.27.RELEASE.jar;D:\cyy\.m2\repository\org\aspectj\aspectjweaver\1.8.9\aspectjweaver-1.8.9.jar;D:\cyy\.m2\repository\org\springframework\spring-jdbc\4.3.27.RELEASE\spring-jdbc-4.3.27.RELEASE.jar;D:\cyy\.m2\repository\org\springframework\spring-tx\4.3.27.RELEASE\spring-tx-4.3.27.RELEASE.jar;D:\cyy\.m2\repository\org\springframework\spring-test\4.3.27.RELEASE\spring-test-4.3.27.RELEASE.jar;D:\cyy\.m2\repository\junit\junit\4.12\junit-4.12.jar;D:\cyy\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit3 com.yale.entity.SimpleBeanTest,testBeanLifeCycle七月 18, 2020 11:44:41 上午 org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@71dac704: startup date [Sat Jul 18 11:44:41 CST 2020]; root of context hierarchy七月 18, 2020 11:44:41 上午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions信息: Loading XML bean definitions from class path resource [spring-test.xml]BeanNameAware setBeanName...BeanFactoryAware setBeanFactory...ApplicationContextAware setApplicationContext...MyBeanProcessor postProcessBeforeInitialization, beanName is simpleBeanInitializingBean afterPropertiesSet...SimpleBean myInit...MyBeanProcessor postProcessAfterInitialization, beanName is simpleBeanThis is SimpleBean...DisposableBean destroy...SimpleBean myDestroy...Process finished with exit code 0</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Framework </tag>
            
            <tag> Bean生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【bat脚本】【问题修复】此时不应有xxx</title>
      <link href="/2020/07/16/bat-jiao-ben-wen-ti-xiu-fu-ci-shi-bu-ying-you-xxx/"/>
      <url>/2020/07/16/bat-jiao-ben-wen-ti-xiu-fu-ci-shi-bu-ying-you-xxx/</url>
      
        <content type="html"><![CDATA[<h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h3><p>有这么一段代码，遍历当前目录下的所有图片文件并打印。</p><p>然后，测试将每个文件路径赋值给新变量输出。</p><p>代码如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">for</span> /r %%i <span class="token keyword">in</span> <span class="token punctuation">(</span>*.jpg, *.png<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>    <span class="token keyword">echo</span> %%i    <span class="token keyword">set</span> str<span class="token operator">=</span>%%i    <span class="token keyword">echo</span> %str%<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，却未能正常输出，输出结果如下：</p><pre class="line-numbers language-bash"><code class="language-bash">此时不应有 .jpg。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>分析问题，是.jpg文件含有圆括号，那么需要双引号将变量括起来。</p><h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2. 解决问题"></a>2. 解决问题</h3><p>修改代码如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">for</span> /r %%i <span class="token keyword">in</span> <span class="token punctuation">(</span>*.jpg, *.png<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>    <span class="token keyword">echo</span> %%i    <span class="token keyword">set</span> str<span class="token operator">=</span>%%i    <span class="token keyword">echo</span> <span class="token string">"%str%"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><pre class="line-numbers language-bash"><code class="language-bash">D:\CodeTest\BatTest\imagebed\blog\PicGo安装Gitee插件.png<span class="token string">"D:\CodeTest\BatTest\imagebed\wallpaper\wallpaper (5).jpg"</span>D:\CodeTest\BatTest\imagebed\blog\spring-overview.png<span class="token string">"D:\CodeTest\BatTest\imagebed\wallpaper\wallpaper (5).jpg"</span>D:\CodeTest\BatTest\imagebed\wallpaper\wallpaper <span class="token punctuation">(</span>3<span class="token punctuation">)</span>.jpg<span class="token string">"D:\CodeTest\BatTest\imagebed\wallpaper\wallpaper (5).jpg"</span>D:\CodeTest\BatTest\imagebed\wallpaper\wallpaper <span class="token punctuation">(</span>5<span class="token punctuation">)</span>.jpg<span class="token string">"D:\CodeTest\BatTest\imagebed\wallpaper\wallpaper (5).jpg"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果是出来了，但是多了双引号，而且每次循环结果都一样。</p><p>再次修改代码如下：</p><pre class="line-numbers language-bash"><code class="language-bash">setlocal enabledelayedexpansion<span class="token keyword">for</span> /r %%i <span class="token keyword">in</span> <span class="token punctuation">(</span>*.jpg, *.png<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>    <span class="token keyword">echo</span> %%i    <span class="token keyword">set</span> str<span class="token operator">=</span>%%i    <span class="token keyword">echo</span> <span class="token operator">!</span>str<span class="token operator">!</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，输出结果就正常了。</p><pre><code>D:\CodeTest\BatTest\imagebed\blog\PicGo安装Gitee插件.pngD:\CodeTest\BatTest\imagebed\blog\PicGo安装Gitee插件.pngD:\CodeTest\BatTest\imagebed\blog\spring-overview.pngD:\CodeTest\BatTest\imagebed\blog\spring-overview.pngD:\CodeTest\BatTest\imagebed\wallpaper\wallpaper (3).jpgD:\CodeTest\BatTest\imagebed\wallpaper\wallpaper (3).jpgD:\CodeTest\BatTest\imagebed\wallpaper\wallpaper (5).jpgD:\CodeTest\BatTest\imagebed\wallpaper\wallpaper (5).jpg</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bat脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【bat脚本】变量未正常输出问题分析</title>
      <link href="/2020/07/16/bat-jiao-ben-bian-liang-wei-zheng-chang-shu-chu-wen-ti-fen-xi/"/>
      <url>/2020/07/16/bat-jiao-ben-bian-liang-wei-zheng-chang-shu-chu-wen-ti-fen-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h3><p>有这么一段简单的代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> basePath <span class="token operator">=</span> %CD%\<span class="token keyword">echo</span> %basePath%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果却输出：</p><pre class="line-numbers language-bash"><code class="language-bash">ECHO 处于关闭状态。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>纠结了好长一段时间，原来是“=”左右的空格问题。</p><h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2. 解决问题"></a>2. 解决问题</h3><p><strong>去掉“=”左右的空格</strong>，代码如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> basePath<span class="token operator">=</span>%CD%\<span class="token keyword">echo</span> %basePath%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行后，便正常输出了。</p><pre class="line-numbers language-bash"><code class="language-bash">D:\CodeTest\BatTest\imagebed\<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bat脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【bat脚本】向脚本传递参数</title>
      <link href="/2020/07/16/bat-jiao-ben-xiang-jiao-ben-chuan-di-can-shu/"/>
      <url>/2020/07/16/bat-jiao-ben-xiang-jiao-ben-chuan-di-can-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-参数传入"><a href="#1-参数传入" class="headerlink" title="1. 参数传入"></a>1. 参数传入</h3><p>在运行脚本时，可以向脚本传递一些参数。比如：</p><pre class="line-numbers language-shell"><code class="language-shell">D:\CodeTest\BatTest\imagebed>auto.bat 111 aaa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>“win+r”打开cmd，进入D:\CodeTest\BatTest\imagebed目录。</p><pre class="line-numbers language-shell"><code class="language-shell">cd /d D:\CodeTest\BatTest\imagebed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为该目录下，我只放了一个脚本，所以输入“a”，再按tab键，“auto.bat”就自动出来了。</p><p>后面再跟两个参数，用空格分隔。</p><p>“.bat”后缀不是必须的，比如：</p><pre class="line-numbers language-shell"><code class="language-shell">D:\CodeTest\BatTest\imagebed>auto 111 aaa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-参数接收"><a href="#2-参数接收" class="headerlink" title="2. 参数接收"></a>2. 参数接收</h3><p>下面看看如何在bat脚本中接受参数。</p><pre class="line-numbers language-shell"><code class="language-shell">@echo offecho param0=%0echo param0=%1echo param0=%2pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>%0 是脚本的名称，也就是上面执行命令的第一个单词，如果是“auto.bat”，那么%0就是“auto.bat”。如果是“auto”，那么%0就是“auto”。</p><p>允许使用 %1 ~ %9 ，接受第1至第9个参数。</p><p>也就是说，“%”后面只能跟一个数字，后面的数字只会当成字符串。</p><p>比如，“%10” ，结果只会是“%1”的参数值，后面再加个0 。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bat脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【bat脚本】单行注释与多行注释</title>
      <link href="/2020/07/16/bat-jiao-ben-dan-xing-zhu-shi-yu-duo-xing-zhu-shi/"/>
      <url>/2020/07/16/bat-jiao-ben-dan-xing-zhu-shi-yu-duo-xing-zhu-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-单行注释"><a href="#1-单行注释" class="headerlink" title="1. 单行注释"></a>1. 单行注释</h3><h4 id="1-1-rem"><a href="#1-1-rem" class="headerlink" title="1.1 rem"></a>1.1 rem</h4><pre class="line-numbers language-shell"><code class="language-shell">rem 注释内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2"><a href="#1-2" class="headerlink" title="1.2 ::"></a>1.2 ::</h4><pre class="line-numbers language-shell"><code class="language-shell">:: 注释内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-多行注释"><a href="#2-多行注释" class="headerlink" title="2.多行注释"></a>2.多行注释</h3><pre class="line-numbers language-shell"><code class="language-shell">goto :标记注释内容1注释内容2注释内容3:标记<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-示例"><a href="#3-示例" class="headerlink" title="3. 示例"></a>3. 示例</h3><pre class="line-numbers language-shell"><code class="language-shell">rem 单行注释:: 1. 加载index_template.html和dir_template.html:: 2. 遍历目录，每个目录根据dir_template.html生成dir.html:: 3. 根据index_template.html和每个目录dir.html路径生成index.html:: 多行注释goto :commentfor /r %%i in (*.jpg, *.png) do (     echo %%~nxi    echo %%~dpi):comment:: 单行注释rem echo Hello World!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bat脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【bat脚本】中文乱码</title>
      <link href="/2020/07/16/bat-jiao-ben-zhong-wen-luan-ma/"/>
      <url>/2020/07/16/bat-jiao-ben-zhong-wen-luan-ma/</url>
      
        <content type="html"><![CDATA[<h3 id="1-原因描述"><a href="#1-原因描述" class="headerlink" title="1. 原因描述"></a>1. 原因描述</h3><p>使用EditPlus描写脚本后，最后保存的文件编码格式为UTF-8。<br>然后双击运行bat脚本，中文直接显示乱码。</p><h3 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2. 解决办法"></a>2. 解决办法</h3><p>改变文件编码，将UTF-8转成ANSI。</p><h4 id="2-1-EditPlus"><a href="#2-1-EditPlus" class="headerlink" title="2.1 EditPlus"></a>2.1 EditPlus</h4><pre><code>Document -- File Encoding -- Convert Encoding... -- 选择编码 -- 确定</code></pre><h4 id="2-2-Notepad（记事本）"><a href="#2-2-Notepad（记事本）" class="headerlink" title="2.2 Notepad（记事本）"></a>2.2 Notepad（记事本）</h4><pre><code>文件 -- 另存为 -- 选择编码 -- 确定</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bat脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【bat脚本】窗口标题命名</title>
      <link href="/2020/07/16/bat-jiao-ben-chuang-kou-biao-ti-ming-ming/"/>
      <url>/2020/07/16/bat-jiao-ben-chuang-kou-biao-ti-ming-ming/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-shell"><code class="language-shell">title 窗口标题名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-shell"><code class="language-shell">@echo offtitle 我是一个窗口标题pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bat脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Framework】BeanFactory和ApplicationContext介绍</title>
      <link href="/2020/07/15/spring-framework-beanfactory-he-applicationcontext-jie-shao/"/>
      <url>/2020/07/15/spring-framework-beanfactory-he-applicationcontext-jie-shao/</url>
      
        <content type="html"><![CDATA[<h3 id="1-BeanFactory的定义"><a href="#1-BeanFactory的定义" class="headerlink" title="1. BeanFactory的定义"></a>1. BeanFactory的定义</h3><p>BeanFactory是Spring核心底层接口，为IoC容器管理Bean提供基础支持。</p><h3 id="2-ApplicationContext的定义"><a href="#2-ApplicationContext的定义" class="headerlink" title="2. ApplicationContext的定义"></a>2. ApplicationContext的定义</h3><p>ApplicationContext是BeanFactory的子类，不仅拥有BeanFactory中管理Bean的能力，还拥有一些高级特性（比如国际化、资源读取以及事件发布等待）。</p><h3 id="3-BeanFactory和ApplicationContext的区别"><a href="#3-BeanFactory和ApplicationContext的区别" class="headerlink" title="3. BeanFactory和ApplicationContext的区别"></a>3. BeanFactory和ApplicationContext的区别</h3><ul><li>实例化Bean的时间不同<ul><li>BeanFactory在getBean()时，才会实例化；</li><li>ApplicationContext则是在容器启动时就已经全部实例化；</li></ul></li><li>使用场景不同<ul><li>BeanFactory适合对资源要求比较高的场景，比如嵌入式开发；</li><li>ApplicationContext则应用广泛，毕竟设备资源日渐丰富。在Web开发中尤其适合，将耗时的实例化全部放到系统启动期间，不仅提高系统运行期间的响应时间，更能在启动时检查是否存在实例化问题。</li></ul></li></ul><h3 id="4-BeanFactory的使用"><a href="#4-BeanFactory的使用" class="headerlink" title="4. BeanFactory的使用"></a>4. BeanFactory的使用</h3><pre class="line-numbers language-java"><code class="language-java">Resource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BeanFactory context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanFactory</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-ApplicationContext的使用"><a href="#5-ApplicationContext的使用" class="headerlink" title="5. ApplicationContext的使用"></a>5. ApplicationContext的使用</h3><pre class="line-numbers language-java"><code class="language-java">ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"services.xml"</span><span class="token punctuation">,</span> <span class="token string">"daos.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PetStoreService service <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"petStore"</span><span class="token punctuation">,</span> PetStoreService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> userList <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getUsernameList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-ApplicationContext的实现类"><a href="#6-ApplicationContext的实现类" class="headerlink" title="6. ApplicationContext的实现类"></a>6. ApplicationContext的实现类</h3><h4 id="6-1-ClassPathXmlApplicationContext"><a href="#6-1-ClassPathXmlApplicationContext" class="headerlink" title="6.1 ClassPathXmlApplicationContext"></a>6.1 ClassPathXmlApplicationContext</h4><ol><li>classpath:前缀是不需要的,默认就是指项目的classpath路径下面;</li><li>如果要使用绝对路径,需要加上file:前缀表示这是绝对路径;<pre class="line-numbers language-java"><code class="language-java">ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"file:D:\\idea_workspace\\spring-test\\src\\applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"file:D:/idea_workspace/spring-test/src/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-FileSystemXmlApplicationContext"><a href="#6-2-FileSystemXmlApplicationContext" class="headerlink" title="6.2 FileSystemXmlApplicationContext"></a>6.2 FileSystemXmlApplicationContext</h4></li><li>没有盘符的是项目工作路径,即项目的根目录;</li><li>有盘符表示的是文件绝对路径.</li><li>如果要使用classpath路径,需要前缀classpath:<pre class="line-numbers language-java"><code class="language-java">ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"src/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"webRoot/WEB-INF/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"file:D:/idea_workspace/spring-test/src/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"D:/idea_workspace/spring-test/src/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-GenericApplicationContext"><a href="#6-3-GenericApplicationContext" class="headerlink" title="6.3 GenericApplicationContext"></a>6.3 GenericApplicationContext</h4></li></ol><pre class="line-numbers language-java"><code class="language-java">GenericApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token string">"services.xml"</span><span class="token punctuation">,</span> <span class="token string">"daos.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Framework </tag>
            
            <tag> BeanFactory </tag>
            
            <tag> ApplicationContext </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】PicGo+Gitee搭建个人图床</title>
      <link href="/2020/07/14/hexo-picgo-gitee-da-jian-ge-ren-tu-chuang/"/>
      <url>/2020/07/14/hexo-picgo-gitee-da-jian-ge-ren-tu-chuang/</url>
      
        <content type="html"><![CDATA[<h3 id="1-摘要"><a href="#1-摘要" class="headerlink" title="1. 摘要"></a>1. 摘要</h3><ul><li>使用PicGo+Gitee搭建个人图床；</li><li>支持本地上传图片后，可直接复制Markdown格式链接；</li></ul><h3 id="2-下载PicGo"><a href="#2-下载PicGo" class="headerlink" title="2. 下载PicGo"></a>2. 下载PicGo</h3><p>给个蓝奏云的链接：<a href="https://www.lanzous.com/ia49ojg" target="_blank" rel="noopener">PicGo-Setup-2.2.2.exe</a></p><h3 id="3-下载Gitee插件"><a href="#3-下载Gitee插件" class="headerlink" title="3. 下载Gitee插件"></a>3. 下载Gitee插件</h3><ul><li>打开PicGo，左侧菜单栏选择插件设置；</li><li>搜索框输入“gitee”，选择一个点击安装即可。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/yezhechenyang/imagebed/raw/master/blog/PicGo%E5%AE%89%E8%A3%85Gitee%E6%8F%92%E4%BB%B6.png" alt=""></li></ul><h3 id="4-Gitee新建个人图床仓库"><a href="#4-Gitee新建个人图床仓库" class="headerlink" title="4. Gitee新建个人图床仓库"></a>4. Gitee新建个人图床仓库</h3><ul><li>新建仓库时，是否开源选择公开；</li><li>在服务里打开Gitee Page服务；</li></ul><h3 id="5-Gitee创建私人令牌"><a href="#5-Gitee创建私人令牌" class="headerlink" title="5. Gitee创建私人令牌"></a>5. Gitee创建私人令牌</h3><ul><li>在设置里选择私人令牌，再点击生成新令牌；</li><li>选择权限时，点击全选取消全选，吼吼选择projects即可；</li><li>输入密码后，会得到一个token，将它复制下来；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/yezhechenyang/imagebed/raw/master/blog/Gitee%E7%94%9F%E6%88%90%E7%A7%81%E4%BA%BA%E4%BB%A4%E7%89%8C%E9%80%89%E6%8B%A9%E6%9D%83%E9%99%90.png" alt=""></p><h3 id="6-PicGo中配置Gitee图床"><a href="#6-PicGo中配置Gitee图床" class="headerlink" title="6. PicGo中配置Gitee图床"></a>6. PicGo中配置Gitee图床</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/yezhechenyang/imagebed/raw/master/blog/PicGo%E4%B8%ADGitee%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE.png" alt=""></p><h3 id="7-PicGo的使用"><a href="#7-PicGo的使用" class="headerlink" title="7. PicGo的使用"></a>7. PicGo的使用</h3><ul><li>打开PicGo，选择上传区；</li><li>将图片直接拖拽至窗口，上传成功后链接直接在粘贴板中；</li><li>然后在博客中粘贴图片链接；</li><li>也可在相册中复制历史上传图片；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/yezhechenyang/imagebed/raw/master/blog/PicGo%E5%9C%A8%E7%9B%B8%E5%86%8C%E4%B8%AD%E5%A4%8D%E5%88%B6%E9%93%BE%E6%8E%A5.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> PicGo </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Framework】什么是IoC？</title>
      <link href="/2020/07/13/spring-framework-shi-me-shi-ioc/"/>
      <url>/2020/07/13/spring-framework-shi-me-shi-ioc/</url>
      
        <content type="html"><![CDATA[<p>英文全称：Inversion of Control<br>中文翻译：控制反转  </p><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>IoC是面向对象的一种思想，意在<strong>控制对象获取依赖对象的方式</strong>，由原来在对象中通过硬编码获取依赖对象，转变成通过第三方（IoC容器）向对象推送依赖对象。</p><h3 id="2-对象与依赖对象的关系"><a href="#2-对象与依赖对象的关系" class="headerlink" title="2. 对象与依赖对象的关系"></a>2. 对象与依赖对象的关系</h3><p>在面向对象的世界中，需要多个对象共同协作完成业务功能实现。</p><p>而多个对象的共同协作便产生了对象与依赖对象的关系。</p><p>比如A对象需要用到B对象完成某一功能，那么需要在A对象中创建一个B对象。如此一来，A对象对B对象产生了依赖，对于A对象来说，B对象便是它的依赖对象。</p><h3 id="3-IoC的实现方式"><a href="#3-IoC的实现方式" class="headerlink" title="3. IoC的实现方式"></a>3. IoC的实现方式</h3><h4 id="3-1-依赖注入（DI）"><a href="#3-1-依赖注入（DI）" class="headerlink" title="3.1 依赖注入（DI）"></a>3.1 依赖注入（DI）</h4><p>DI（Dependency Injection）是IoC的一种具体实现方式，Spring IoC容器便是通过这种方式实现控制反转。</p><p><strong>DI的实现主要通过对象先在容器中注册（简单来说就是向容器打个招呼，需要哪些依赖对象），然后容器在程序运行期间将依赖对象注入给它。</strong></p><p>Spring主要通过构造注入和设值注入两种方式实现。</p><p>下面是两种注入方式的示例代码：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloDAO<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yale.dao.HelloDAO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 设值注入 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iHello2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yale.service.HelloService2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloDAO<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloDAO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 构造注入 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iHello3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yale.service.HelloService3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloDAO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-依赖查找（DL）"><a href="#3-2-依赖查找（DL）" class="headerlink" title="3.2 依赖查找（DL）"></a>3.2 依赖查找（DL）</h4><p>DL（Dependency Lookup）是传统的IoC实现方式，EJB用的就是这种方式。</p><p><strong>DL的实现方式是对象调用容器提供的API，主动查找自己需要的依赖对象。</strong></p><h4 id="3-3-DI与DL的区别"><a href="#3-3-DI与DL的区别" class="headerlink" title="3.3 DI与DL的区别"></a>3.3 DI与DL的区别</h4><h5 id="3-3-1-被动与主动"><a href="#3-3-1-被动与主动" class="headerlink" title="3.3.1 被动与主动"></a>3.3.1 被动与主动</h5><p>DI是被动注入依赖对象，DL是主动查找依赖对象。</p><h5 id="3-3-2-非侵入式与侵入式"><a href="#3-3-2-非侵入式与侵入式" class="headerlink" title="3.3.2 非侵入式与侵入式"></a>3.3.2 非侵入式与侵入式</h5><p>DI是非侵入式的，也就是说容器可以随便更改，而不需要更改对象中的代码；</p><p>DL则是侵入式的，因为有调用容器提供的API，若更改容器，则需要修改对象中的代码；</p><hr><p><strong>IoC的本质：是将依赖对象的控制权交给了容器。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Framework </tag>
            
            <tag> IoC </tag>
            
            <tag> DI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】头像防盗链破解</title>
      <link href="/2020/07/11/hexo-tou-xiang-fang-dao-lian-po-jie/"/>
      <url>/2020/07/11/hexo-tou-xiang-fang-dao-lian-po-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="1-情景描述"><a href="#1-情景描述" class="headerlink" title="1. 情景描述"></a>1. 情景描述</h3><pre><code>在友情链接页面添加友链时，发现头像显示不出来！！！按F12一查看，却发现：返回HTTP状态码403，x-tengine-error: denied by Referer ACL 。头像来源是CSDN，很明显，CSDN是添加了防盗链的。那么，该如何解决呢？</code></pre><h3 id="2-解决过程"><a href="#2-解决过程" class="headerlink" title="2. 解决过程"></a>2. 解决过程</h3><p>防盗链是通过 referrer 来控制的。</p><p>如果在浏览器新标签页直接访问头像是可以显示的，因为请求头的referrer为空。</p><p>而在你自己的网站直接通过img标签引入，请求时便会带上，比如</p><pre><code>referer: https://zhangxiaocai.cn/friends/</code></pre><p>csdn发现请求来源不是自己的网站，便会禁止访问。</p><p><strong>在网上找了两种方法，都不起作用</strong>，分别是：</p><ul><li>添加 meta 标签<pre><code>&lt;meta name="referrer" content="no-referrer"&gt;</code></pre></li><li>直接在img标签设置 referrer<pre><code>&lt;img referrer="no-referrer|origin|unsafe-url" src="{{item.src}}"/&gt;</code></pre></li></ul><p>最后找到一种解决方案，虽然麻烦一点，但效果不错。</p><h3 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h3><p>通过 Window 对象与 iframe 的配合，加载防盗链图片。</p><pre><code>&lt;!--&lt;img src="&lt;%- friend.avatar %&gt;" alt="img"&gt;--&gt;&lt;script&gt;        window.img&lt;%- i %&gt; = '&lt;style&gt;html,body{margin:0;padding:0;}&lt;/style&gt;&lt;img style="border-radius: 50%;border-style: none;" width="100px" height="100px" src=\'' + "&lt;%- friend.avatar %&gt;" + '?' + Math.random() + '\' /&gt;';        document.write('&lt;iframe src="javascript:parent.img&lt;%- i %&gt;;" frameBorder="0" scrolling="no" width="100px" height="100px"&gt;&lt;/iframe&gt;');&lt;/script&gt;</code></pre><p>a. 将 img 挂在到Window对象中；</p><pre><code>Window.自定义变量 = img 头像内容</code></pre><p>b. 然后创建 iframe，由iframe去获取</p><pre><code>&lt;iframe src="javascript:parent.自定义变量"&gt;&lt;/iframe&gt;</code></pre><p>其中 parent 指的就是 Window 对象。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】概述</title>
      <link href="/2020/07/10/spring-gai-shu/"/>
      <url>/2020/07/10/spring-gai-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Spring介绍"><a href="#1-Spring介绍" class="headerlink" title="1. Spring介绍"></a>1. Spring介绍</h3><ul><li>Spring是世界上最流行的Java开源框架；</li><li>Spring是技术生态体系的集大成者，包含Spring Framework、Spring Boot和Spring Cloud等诸多项目；</li><li>SpringMVC是Spring Framework项目中web模块提供的MVC框架；</li></ul><h3 id="2-Spring-Framework介绍"><a href="#2-Spring-Framework介绍" class="headerlink" title="2. Spring Framework介绍"></a>2. Spring Framework介绍</h3><ul><li>Spring Framework是整个Spring生态体系的基石；</li><li>为依赖注入、事务管理、WEB应用、数据访问等提供支持；</li></ul><h4 id="2-1-Spring-Framework的体系结构"><a href="#2-1-Spring-Framework的体系结构" class="headerlink" title="2.1 Spring Framework的体系结构"></a>2.1 Spring Framework的体系结构</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://yezhechenyang.gitee.io/imagebed/blog/spring-overview.png" alt="Spring Framework体系"></p><p>上图是在Spring官网提供的<a href="https://docs.spring.io/spring/docs/4.3.27.RELEASE/spring-framework-reference/htmlsingle/" target="_blank" rel="noopener">Spring Framework 4.3.27 在线参考文档</a>找到的Spring体系结构图。（相对于Spring3，多了Messaging模块。）</p><h4 id="2-2-模块划分"><a href="#2-2-模块划分" class="headerlink" title="2.2 模块划分"></a>2.2 模块划分</h4><p>六大模块：核心容器、面向切面与植入、消息传递、数据访问与集成、Web和远程调用、测试。</p><h5 id="2-2-1-核心容器"><a href="#2-2-1-核心容器" class="headerlink" title="2.2.1 核心容器"></a>2.2.1 核心容器</h5><pre><code>spring-core：依赖注入IoC与DI的最基本实现spring-beans：Bean工厂与bean的装配spring-context：spring的context上下文即IoC容器spring-context-support spring-expression：spring表达式语言</code></pre><h5 id="2-2-2-面向切面与植入"><a href="#2-2-2-面向切面与植入" class="headerlink" title="2.2.2 面向切面与植入"></a>2.2.2 面向切面与植入</h5><pre><code>spring-aop：面向切面编程spring-aspects：集成AspectJspring-instrument：提供一些类级的工具支持和ClassLoader级的实现，用于服务器spring-instrument-tomcat：针对tomcat的instrument实现</code></pre><h5 id="2-2-3-消息传递"><a href="#2-2-3-消息传递" class="headerlink" title="2.2.3 消息传递"></a>2.2.3 消息传递</h5><pre><code>spring-messaging</code></pre><h5 id="2-2-4-数据访问与集成"><a href="#2-2-4-数据访问与集成" class="headerlink" title="2.2.4 数据访问与集成"></a>2.2.4 数据访问与集成</h5><pre><code>spring-jdbc：提供JDBC支持spring-tx：事务管理spring-orm：对象关系映射支持spring-oxm：XML处理支持spring-jms：Java信息服务支持</code></pre><h5 id="2-2-5-Web和远程调用"><a href="#2-2-5-Web和远程调用" class="headerlink" title="2.2.5 Web和远程调用"></a>2.2.5 Web和远程调用</h5><pre><code>spring-web：提供最基础Web支持spring-webmvc：提供MVC的实现spring-websocket：支持WebSocketspring-webmvc-portlet：在Portlet环境中使用的MVC实现</code></pre><h5 id="2-2-6-测试"><a href="#2-2-6-测试" class="headerlink" title="2.2.6 测试"></a>2.2.6 测试</h5><pre><code>spring-test：用于单元测试与集成测试</code></pre><h3 id="3-Spring-Boot介绍"><a href="#3-Spring-Boot介绍" class="headerlink" title="3. Spring Boot介绍"></a>3. Spring Boot介绍</h3><ul><li>是Spring Framework的一套快速配置脚手架，可以基于Spring Boot 快速开发单个微服务；</li><li>为快速启动且最小化配置的spring应用而设计；</li></ul><h3 id="4-Spring-Cloud介绍"><a href="#4-Spring-Cloud介绍" class="headerlink" title="4. Spring Cloud介绍"></a>4. Spring Cloud介绍</h3><ul><li>是一整套基于Spring Boot的微服务解决方案；</li><li>为开发者提供了很多工具，用于快速构建分布式系统的一些通用模式，例如：配置管理、注册中心、服务发现、限流、网关、熔断、链路追踪等；</li><li>关注于多个微服务的整合与管理；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Framework </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Chrome扩展开发】去贴吧广告</title>
      <link href="/2020/07/07/chrome-kuo-zhan-kai-fa-qu-tie-ba-guang-gao/"/>
      <url>/2020/07/07/chrome-kuo-zhan-kai-fa-qu-tie-ba-guang-gao/</url>
      
        <content type="html"><![CDATA[<h3 id="1-本地创建插件目录和文件"><a href="#1-本地创建插件目录和文件" class="headerlink" title="1. 本地创建插件目录和文件"></a>1. 本地创建插件目录和文件</h3><h3 id="1-1-创建目录"><a href="#1-1-创建目录" class="headerlink" title="1.1 创建目录"></a>1.1 创建目录</h3><pre><code>D:\CodeTest\BrowserExtension\RemoveAd</code></pre><h3 id="1-2-创建文件"><a href="#1-2-创建文件" class="headerlink" title="1.2 创建文件"></a>1.2 创建文件</h3><blockquote><p>“D:\CodeTest\BrowserExtension\RemoveAd\manifest.json”</p></blockquote><pre><code>{    "manifest_version": 2,    "name": "自定义去广告",    "description": "学习Chrome扩展开发，去广告实践！",    "version": "0.0.1",    // 需要直接注入页面的JS    "content_scripts":     [        {            "matches": ["https://tieba.baidu.com/*"],            // 多个JS按顺序注入            "js": ["tieba-remove-ad.js"],            // 代码注入的时间，可选值： "document_start", "document_end", or "document_idle"，最后一个表示页面空闲时，默认document_idle            "run_at": "document_idle"        }    ]}</code></pre><blockquote><p>“D:\CodeTest\BrowserExtension\RemoveAd\tieba-remove-ad.js”</p></blockquote><pre><code>//判断对象是否存在指定css样式的classfunction hasClass(obj, cls) {    return obj.className.match(new RegExp('(\\s|^)' + cls + '(\\s|$)'));}//给对象添加css样式，或者获取对象的css样式function css(obj, attr, value) {    switch (arguments.length) {        case 2:            //读取属性值            return obj.currentStyle ? obj.currentStyle[attr] : getComputedStyle(obj, null)[attr];            break;        case 3:            //设置属性            obj.style[attr] = value;            break;        default:            return "";    }}//帖子容器ulvar ulItem = document.getElementById('thread_list');//帖子列表livar liArr = ulItem.children;//是否为置顶帖子和普通帖子var flag = false;for(var i = 0; i &lt; liArr.length; i++){    flag = hasClass(liArr[i], 'thread_top_list_folder'); //置顶帖子    flag = flag || hasClass(liArr[i], 'j_thread_list'); //普通帖子    if(flag){        continue;    }else{  // 其他视为广告，隐藏之        css(liArr[i], 'display', 'none');    }}</code></pre><h3 id="2-将插件载入Chrome"><a href="#2-将插件载入Chrome" class="headerlink" title="2. 将插件载入Chrome"></a>2. 将插件载入Chrome</h3><p>打开Chrome，地址栏输入</p><pre><code>chrome://extensions/</code></pre><p>右上角点开开发者模式，会弹出“加载已解压的扩展程序”、“打包扩展程序”等按钮。</p><p>点击“加载已解压的扩展程序”按钮，选择“RemoveAd”文件夹。</p><p>下方会出现一个自己开发的插件卡片。</p><p>卡片包含插件的名称、描述信息。<br>还生成一个唯一的ID。<br>最下面一排是详细信息文字按钮、删除文字按钮、刷新图标按钮以及开启与关闭图标按钮。</p><p>修改了js，可以点击刷新按钮生效。</p><p>开启与关闭图标按钮，对比使用插件前后的效果。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Chrome扩展开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome扩展 </tag>
            
            <tag> 贴吧去广告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】博客搭建</title>
      <link href="/2020/07/05/hexo-bo-ke-da-jian/"/>
      <url>/2020/07/05/hexo-bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h3><p>安装 Git、NodeJs、Hexo 。</p><ul><li>博客框架：Hexo</li><li>博客主题：Matery</li><li>托管：Gitee</li></ul><h3 id="2-下载模板"><a href="#2-下载模板" class="headerlink" title="2. 下载模板"></a>2. 下载模板</h3><p>推荐使用 <a href="https://github.com/shw2018/hexo-blog-fly.git" target="_blank" rel="noopener">hexo-blog-fly</a></p><pre><code>git clone https://github.com/shw2018/hexo-blog-fly.git</code></pre><h3 id="3-本地运行"><a href="#3-本地运行" class="headerlink" title="3. 本地运行"></a>3. 本地运行</h3><h4 id="3-1-修改个人信息"><a href="#3-1-修改个人信息" class="headerlink" title="3.1 修改个人信息"></a>3.1 修改个人信息</h4><pre><code>Hexo博客框架的配置：_config.ymlMatery主题的配置：themes\matery\_config.yml</code></pre><h4 id="3-2-运行"><a href="#3-2-运行" class="headerlink" title="3.2 运行"></a>3.2 运行</h4><pre><code>npm i   # 先安装依赖hexo s  # 再运行</code></pre><h3 id="3-3-访问查看效果"><a href="#3-3-访问查看效果" class="headerlink" title="3.3 访问查看效果"></a>3.3 访问查看效果</h3><pre><code>localhost:4000</code></pre><h3 id="4-部署"><a href="#4-部署" class="headerlink" title="4. 部署"></a>4. 部署</h3><h4 id="4-1-在Gitee上创建一个仓库"><a href="#4-1-在Gitee上创建一个仓库" class="headerlink" title="4.1 在Gitee上创建一个仓库"></a>4.1 在Gitee上创建一个仓库</h4><pre><code>仓库名称：myblog （名字随便自己取）是否开源：公开勾选：使用Readme文件初始化这个仓库</code></pre><h4 id="4-2-本地推送"><a href="#4-2-本地推送" class="headerlink" title="4.2 本地推送"></a>4.2 本地推送</h4><p>修改 _config.yml 中配置的网址配置</p><pre><code>url: https://gitee.com/yezhechenyang/myblogroot: /myblog/</code></pre><p>修改 _config.yml 中配置的部署仓库地址</p><pre><code>deploy:- type: git  repo:    gitee: https://gitee.com/yezhechenyang/myblog.git  branch: master</code></pre><p>去掉 baidu_url_submitter ，这个以后再琢磨</p><pre><code># - type: baidu_url_submitter</code></pre><p>运行部署命令</p><pre><code>hexo d</code></pre><h4 id="4-3-在Gitee上启动Gitee-Pages服务"><a href="#4-3-在Gitee上启动Gitee-Pages服务" class="headerlink" title="4.3 在Gitee上启动Gitee Pages服务"></a>4.3 在Gitee上启动Gitee Pages服务</h4><pre><code>打开 myblog 仓库；选择 服务 -- Gitee Pages；勾选 强制 HTTPS ；点击启动。</code></pre><h4 id="4-4-访问看看效果"><a href="#4-4-访问看看效果" class="headerlink" title="4.4 访问看看效果"></a>4.4 访问看看效果</h4><pre><code>https://yezhechenyang.gitee.io/myblog</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/04/hello-world/"/>
      <url>/2020/07/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Hello World!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
